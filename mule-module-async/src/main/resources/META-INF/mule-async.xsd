<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/async" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            xmlns:schemadoc="http://www.mulesoft.org/schema/mule/schemadoc"
            xmlns:beans="http://www.springframework.org/schema/beans"
            targetNamespace="http://www.mulesoft.org/schema/mule/async"
            elementFormDefault="qualified" attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.springframework.org/schema/beans"
                schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/3.4/mule.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/schemadoc"
                schemaLocation="http://www.mulesoft.org/schema/mule/schemadoc/3.4/mule-schemadoc.xsd"/>

    <xsd:annotation>
        <xsd:documentation>
            Asynchronous Message Processor
        </xsd:documentation>
        <xsd:appinfo>
            <schemadoc:short-name>Async</schemadoc:short-name>
            <schemadoc:page-title>Async Module</schemadoc:page-title>
        </xsd:appinfo>
    </xsd:annotation>


    <xsd:element name="flow" type="mule:flowType" substitutionGroup="mule:flow">
        <xsd:annotation>
            <xsd:documentation>
                A rest specific flow that references a resource-action pair.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="choice" type="selectiveOutboundRouterType"
                 substitutionGroup="mule:abstract-routing-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Sends the message to the first endpoint whose condition has been satisfied. If no conditions were
                satisfied, sends to the configured default endpoint if configured, or throws an exception if not
                configured.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>


    <xsd:element name="flow-ref" substitutionGroup="mule:abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Allows a 'flow' to be referenced such that the message processing will continue in the referenced flow
                before returning. Message processing in the referenced 'flow' will occur within the context of the
                referenced flow and will therefore use it's exception strategy etc.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="mule:abstractMessageProcessorType">
                    <xsd:attribute name="name" type="xsd:string" use="required"/>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>


    <xsd:element name="foreach" type="foreachProcessorType"
                 substitutionGroup="mule:abstract-message-processor"/>


    <xsd:element name="processor-chain" type="mule:messageProcessorChainType"
                 substitutionGroup="mule:abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>Chain for grouping a set of message processors</xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="round-robin" substitutionGroup="mule:abstract-message-processor"
                 type="routerMessageProcessorType">
        <xsd:annotation>
            <xsd:documentation>
                Send each message received to the next message processor in the circular list of targets
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>


    <xsd:complexType name="selectiveOutboundRouterType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractRoutingMessageProcessorType">
                <xsd:sequence>
                    <xsd:element name="when" type="mule:whenMessageProcessorFilterPairType" minOccurs="1"
                                 maxOccurs="unbounded"/>
                    <xsd:element name="otherwise" type="mule:otherwiseMessageProcessorFilterPairType" minOccurs="0"
                                 maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:complexType name="foreachProcessorType">
        <xsd:complexContent>

            <xsd:extension base="mule:abstractMessageProcessorType">
                <xsd:sequence>
                    <xsd:group ref="mule:messageProcessorOrOutboundEndpoint" minOccurs="1" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="collection" use="optional" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            An expression to that returns a java collection, object array, map or DOM nodes.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="batchSize" use="optional" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            Partitions the collection in subcollections of the specified size.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:complexType name="routerMessageProcessorType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractMessageProcessorType">
                <xsd:sequence>
                    <xsd:element name="route" type="mule:messageProcessorChainType" minOccurs="1"
                                 maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


</xsd:schema>